#!/usr/bin/env node
function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _createForOfIteratorHelper(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=_unsupportedIterableToArray(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var a=0,c=function e(){};return{s:c,n:function n(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function e(n){throw n},f:c}}throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r=!0,s=!1;return{s:function n(){t=t.call(e)},n:function e(){var n=t.next();return r=n.done,n},e:function e(n){s=!0,o=n},f:function e(){try{r||null==t.return||t.return()}finally{if(s)throw o}}}}function _toArray(e){return _arrayWithHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableRest()}function _nonIterableRest(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=({}).toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,n):void 0}}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=Array(n);t<n;t++)a[t]=e[t];return a}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithHoles(e){if(Array.isArray(e))return e}var _process$argv=_toArray(process.argv),command=_process$argv[2],args=_process$argv.slice(3),fs=require("fs"),path=require("path"),_require=require("commander"),program=_require.program,GREEN="\x1b[32m",BLUE="\x1b[34m",RESET="\x1b[0m",specialCharRegex=/[0-9!@#$%^&*()_+{}\[\]:;"'<>,.?/~`|\-=\s]/g;function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function toCamelCase(e){return e.replace(/[^a-zA-Z]+/g,"-").replace(/^-+|-+$/g,"").split("-").map(function(e,n){return 0===n?e.toLowerCase():e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}).join("")}"resource"===command?(program.version("1.0.0").description("Generate route, model, controller, and interface files for a new resource").argument("<name>","Resource name").action(function(e){var n,t,a=specialCharRegex.test(args[0])?toCamelCase(args[0]):args[0].toLowerCase(),c="".concat(args[0],".model.ts"),o=(process.argv.slice(2),(t=function e(n){var t,a=fs.readdirSync(n),o=_createForOfIteratorHelper(a);try{for(o.s();!(t=o.n()).done;){var r=t.value,s=path.join(n,r);if(fs.statSync(s).isDirectory()){var i=e(s);if(i)return i}else if(r===c)return s}}catch(d){o.e(d)}finally{o.f()}return null}(path.join(process.cwd(),"src")))?{exists:!0,filePath:t}:{exists:!1,filePath:null}),r=capitalize(a),s=path.join(__dirname,"..","src","modules",args[0]),i=path.join(__dirname,"..","src","modules",args[0]),d=path.join(__dirname,"..","src","modules",args[0]),l=path.join(__dirname,"..","src","modules",args[0]),u=path.join(__dirname,"..","src","modules",args[0]),p=path.join(__dirname,"..","src","modules",args[0]),m=function e(n){return path.relative(path.join(__dirname,".."),n)};[s,i,l,d].forEach(function(e){fs.existsSync(e)||fs.mkdirSync(e,{recursive:!0})});var h="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(r,",\n  createMany").concat(r,",\n  update").concat(r,",\n  updateMany").concat(r,",\n  delete").concat(r,",\n  deleteMany").concat(r,",\n  get").concat(r,"ById,\n  getMany").concat(r,"\n} from './").concat(args[0],".controller';\n\n//Import validation from corresponding module\nimport { validate").concat(r," } from './").concat(args[0],".validation';\nimport { validateId, validateIds } from '../../handlers/common-zod-validator';\n\n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"\n * @description Create a new ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['create").concat(r,"']\n * @param {function} validation - ['validate").concat(r,"']\n */\nrouter.post(\"/create-").concat(args[0],'", validate').concat(r,", create").concat(r,");\n\n/**\n * @route POST /api/v1/").concat(args[0],"/create-").concat(args[0],"/many\n * @description Create multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['createMany").concat(r,"']\n */\nrouter.post(\"/create-").concat(args[0],'/many", createMany').concat(r,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/many\n * @description Update multiple ").concat(args[0]," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.put(\"/update-").concat(args[0],'/many", validateIds, updateMany').concat(r,");\n\n/**\n * @route PUT /api/v1/").concat(args[0],"/update-").concat(args[0],"/:id\n * @description Update ").concat(args[0]," information\n * @param {string} id - The ID of the ").concat(args[0]," to update\n * @access Public\n * @param {function} controller - ['update").concat(r,"']\n * @param {function} validation - ['validateId']\n */\nrouter.put(\"/update-").concat(args[0],'/:id", validateId, update').concat(r,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/many\n * @description Delete multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(args[0],'/many", validateIds, deleteMany').concat(r,");\n\n/**\n * @route DELETE /api/v1/").concat(args[0],"/delete-").concat(args[0],"/:id\n * @description Delete a ").concat(args[0],"\n * @param {string} id - The ID of the ").concat(args[0]," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(r,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(args[0],'/:id", validateId, delete').concat(r,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/many\n * @description Get multiple ").concat(args[0],"\n * @access Public\n * @param {function} controller - ['getMany").concat(r,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.get(\"/get-").concat(args[0],'/many", validateIds, getMany').concat(r,");\n\n/**\n * @route GET /api/v1/").concat(args[0],"/get-").concat(args[0],"/:id\n * @description Get a ").concat(args[0]," by ID\n * @param {string} id - The ID of the ").concat(args[0]," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(r,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(args[0],'/:id", validateId, get').concat(r,"ById);\n\n// Export the router\nmodule.exports = router;\n    "),f=path.join(s,"".concat(args[0],".route.ts"));fs.writeFileSync(f,h.trim());var y="\nimport { Request, Response } from 'express';\nimport { ".concat(a,"Services } from './").concat(args[0],".service';\nimport ServerResponse from '../../helpers/responses/custom-response';\nimport catchAsync from '../../utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(r,".\n *\n * @param {Request} req - The request object containing ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(args[0]," and get the result\n  const result = await ").concat(a,"Services.create").concat(r,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(r," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(a,"s and get the result\n  const result = await ").concat(a,"Services.createMany").concat(r,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(a,"Services.update").concat(r,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(r," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of ").concat(args[0]," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(args[0]," and get the result\n  const result = await ").concat(a,"Services.updateMany").concat(r,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(args[0],".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(args[0]," by ID\n  await ").concat(a,"Services.delete").concat(r,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(r," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(args[0]," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(args[0]," and get the result\n  await ").concat(a,"Services.deleteMany").concat(r,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(args[0]," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(args[0]," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(r,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(args[0]," by ID and get the result\n  const result = await ").concat(a,"Services.get").concat(r,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(r," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(args[0],".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(r," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(args[0]," based on query parameters and get the result\n  const result = await ").concat(a,"Services.getMany").concat(r,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    "),g=path.join(i,"".concat(args[0],".controller.ts"));fs.writeFileSync(g,y.trim());var v="\nimport mongoose, { Document, Schema } from 'mongoose';\n\n// Define an interface representing a ".concat(r," document\ninterface I").concat(r," extends Document {\n  // Define the schema fields with their types\n  // Example fields (replace with actual fields)\n  // fieldName: fieldType;\n}\n\n// Define the ").concat(r," schema\nconst ").concat(r,"Schema: Schema<I").concat(r,"> = new Schema({\n  // Define schema fields here\n  // Example fields (replace with actual schema)\n  // fieldName: {\n  //   type: Schema.Types.FieldType,\n  //   required: true,\n  //   trim: true,\n  // },\n});\n\n// Create the ").concat(r," model\nconst ").concat(r," = mongoose.model<I").concat(r,">('").concat(r,"', ").concat(r,"Schema);\n\n// Export the ").concat(r," model\nexport default ").concat(r,";\n    "),b=path.join(l,"".concat(args[0],".model.ts"));o.exists||fs.writeFileSync(b,v.trim());var R="\n/**\n * Type definition for ".concat(r,".\n *\n * This type defines the structure of a single ").concat(a," object.\n * @interface T").concat(r,"\n */\nexport interface T").concat(r," {\n  // Add fields as needed\n}\n    "),q=path.join(d,"".concat(args[0],".interface.ts"));fs.writeFileSync(q,R.trim());var T="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '../../handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ".concat(a," data.\n */\nconst zod").concat(r,"Schema = z.object({\n // Define schema fields here\n}).strict();\n\n/**\n * Middleware function to validate ").concat(a," using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate").concat(r," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request body\n  const { error, success } = zod").concat(r,"Schema.safeParse(req.body);\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n    "),S=path.join(u,"".concat(args[0],".validation.ts"));fs.writeFileSync(S,T.trim());var $=null==o||null===(n=o.filePath)||void 0===n?void 0:n.substring(o.filePath.indexOf("modules")+7+1),I="\n// Import the model\nimport ".concat(r,"Model from '").concat(o.exists?"../".concat($.replace(/\\/g,"/").replace(/\.ts$/,"")):"./".concat(args[0],".model"),"';\n\n/**\n * Service function to create a new ").concat(a,".\n *\n * @param data - The data to create a new ").concat(a,".\n * @returns {Promise<").concat(r,">} - The created ").concat(a,".\n */\nconst create").concat(r," = async (data: object) => {\n  const new").concat(r," = new ").concat(r,"Model(data);\n  return await new").concat(r,".save();\n};\n\n/**\n * Service function to create multiple ").concat(a,".\n *\n * @param data - An array of data to create multiple ").concat(a,".\n * @returns {Promise<").concat(r,"[]>} - The created ").concat(a,".\n */\nconst createMany").concat(r," = async (data: object[]) => {\n  return await ").concat(r,"Model.insertMany(data);\n};\n\n/**\n * Service function to update a single ").concat(a," by ID.\n *\n * @param id - The ID of the ").concat(a," to update.\n * @param data - The updated data for the ").concat(a,".\n * @returns {Promise<").concat(r,">} - The updated ").concat(a,".\n */\nconst update").concat(r," = async (id: string, data: object) => {\n  return await ").concat(r,"Model.findByIdAndUpdate(id, data, { new: true });\n};\n\n/**\n * Service function to update multiple ").concat(a,".\n *\n * @param data - An array of data to update multiple ").concat(a,".\n * @returns {Promise<").concat(r,"[]>} - The updated ").concat(a,".\n */\nconst updateMany").concat(r," = async (data: { id: string, updates: object }[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    ").concat(r,"Model.findByIdAndUpdate(id, updates, { new: true })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(a," by ID.\n *\n * @param id - The ID of the ").concat(a," to delete.\n * @returns {Promise<").concat(r,">} - The deleted ").concat(a,".\n */\nconst delete").concat(r," = async (id: string) => {\n  return await ").concat(r,"Model.findByIdAndDelete(id);\n};\n\n/**\n * Service function to delete multiple ").concat(a,".\n *\n * @param ids - An array of IDs of ").concat(a," to delete.\n * @returns {Promise<").concat(r,"[]>} - The deleted ").concat(a,".\n */\nconst deleteMany").concat(r," = async (ids: string[]) => {\n  return await ").concat(r,"Model.deleteMany({ _id: { $in: ids } });\n};\n\n/**\n * Service function to retrieve a single ").concat(a," by ID.\n *\n * @param id - The ID of the ").concat(a," to retrieve.\n * @returns {Promise<").concat(r,">} - The retrieved ").concat(a,".\n */\nconst get").concat(r,"ById = async (id: string) => {\n  return await ").concat(r,"Model.findById(id);\n};\n\n/**\n * Service function to retrieve multiple ").concat(a," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(a,".\n * @returns {Promise<").concat(r,"[]>} - The retrieved ").concat(a,".\n */\nconst getMany").concat(r," = async (query: object) => {\n  return await ").concat(r,"Model.find(query);\n};\n\nexport const ").concat(a,"Services = {\n  create").concat(r,",\n  createMany").concat(r,",\n  update").concat(r,",\n  updateMany").concat(r,",\n  delete").concat(r,",\n  deleteMany").concat(r,",\n  get").concat(r,"ById,\n  getMany").concat(r,",\n};\n\n    "),E=path.join(p,"".concat(args[0],".service.ts"));fs.writeFileSync(E,I.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(g)," ").concat(BLUE,"(").concat(Buffer.byteLength(y,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(q)," ").concat(BLUE,"(").concat(Buffer.byteLength(R,"utf8")," bytes)")),o.exists||console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(b)," ").concat(BLUE,"(").concat(Buffer.byteLength(v,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(f)," ").concat(BLUE,"(").concat(Buffer.byteLength(h,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(E)," ").concat(BLUE,"(").concat(Buffer.byteLength(I,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(m(S)," ").concat(BLUE,"(").concat(Buffer.byteLength(T,"utf8")," bytes)"))}),program.parse(process.argv)):"nested-resource"===command?(program.version("1.0.0").description("Generate nested route, model, controller, and interface files for a new resource").argument("<path>","Nested path to resource (e.g., folder1/folder2/resourceName)").action(function(e){var n,t=args[0].split("/"),a=t[t.length-1],c="".concat(a,".model.ts"),o=(process.argv.slice(2),(n=function e(n){var t,a=fs.readdirSync(n),o=_createForOfIteratorHelper(a);try{for(o.s();!(t=o.n()).done;){var r=t.value,s=path.join(n,r);if(fs.statSync(s).isDirectory()){var i=e(s);if(i)return i}else if(r===c)return s}}catch(d){o.e(d)}finally{o.f()}return null}(path.join(process.cwd(),"src")))?{exists:!0,filePath:n}:{exists:!1,filePath:null}),r=t.pop(),s=specialCharRegex.test(args[0])?toCamelCase(r):r.toLowerCase(),i=t,d=capitalize(s),l=path.join(__dirname,"..","src"),u=path.join.apply(path,[l,"modules"].concat(_toConsumableArray(i),[r])),p=function e(n){return path.relative(path.join(__dirname,".."),n)};fs.existsSync(u)||fs.mkdirSync(u,{recursive:!0});var m="\n// Import Router from express\nimport { Router } from 'express';\n\n// Import controller from corresponding module\nimport { \n  create".concat(d,",\n  createMany").concat(d,",\n  update").concat(d,",\n  updateMany").concat(d,",\n  delete").concat(d,",\n  deleteMany").concat(d,",\n  get").concat(d,"ById,\n  getMany").concat(d,"\n} from './").concat(r,".controller';\n\n//Import validation from corresponding module\nimport { validate").concat(d," } from './").concat(r,".validation';\nimport { validateId, validateIds } from '").concat(Array(i.length+2).fill("..").join("/"),"/handlers/common-zod-validator';\n      \n// Initialize router\nconst router = Router();\n\n// Define route handlers\n/**\n * @route POST /api/v1/").concat(i.join("/"),"/").concat(r,"/create-").concat(r,"\n * @description Create a new ").concat(r,"\n * @access Public\n * @param {function} controller - ['create").concat(d,"']\n * @param {function} validation - ['validate").concat(d,"']\n */\nrouter.post(\"/create-").concat(r,'", validate').concat(d,", create").concat(d,");\n\n/**\n * @route POST /api/v1/").concat(i.join("/"),"/").concat(r,"/create-").concat(r,"/many\n * @description Create multiple ").concat(r,"\n * @access Public\n * @param {function} controller - ['createMany").concat(d,"']\n */\nrouter.post(\"/create-").concat(r,'/many", createMany').concat(d,");\n\n/**\n * @route PUT /api/v1/").concat(i.join("/"),"/").concat(r,"/update-").concat(r,"/many\n * @description Update multiple ").concat(r," information\n * @access Public\n * @param {function} controller - ['updateMany").concat(d,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.put(\"/update-").concat(r,'/many", validateIds, updateMany').concat(d,");\n\n/**\n * @route PUT /api/v1/").concat(i.join("/"),"/").concat(r,"/update-").concat(r,"/:id\n * @description Update ").concat(r," information\n * @param {string} id - The ID of the ").concat(r," to update\n * @access Public\n * @param {function} controller - ['update").concat(d,"']\n * @param {function} validation - ['validateId']\n */\nrouter.put(\"/update-").concat(r,'/:id", validateId, update').concat(d,");\n\n/**\n * @route DELETE /api/v1/").concat(i.join("/"),"/").concat(r,"/delete-").concat(r,"/many\n * @description Delete multiple ").concat(r,"\n * @access Public\n * @param {function} controller - ['deleteMany").concat(d,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.delete(\"/delete-").concat(r,'/many", validateIds, deleteMany').concat(d,");\n\n/**\n * @route DELETE /api/v1/").concat(i.join("/"),"/").concat(r,"/delete-").concat(r,"/:id\n * @description Delete a ").concat(r,"\n * @param {string} id - The ID of the ").concat(r," to delete\n * @access Public\n * @param {function} controller - ['delete").concat(d,"']\n * @param {function} validation - ['validateId']\n */\nrouter.delete(\"/delete-").concat(r,'/:id", validateId, delete').concat(d,");\n\n/**\n * @route GET /api/v1/").concat(i.join("/"),"/").concat(r,"/get-").concat(r,"/many\n * @description Get multiple ").concat(r,"\n * @access Public\n * @param {function} controller - ['getMany").concat(d,"']\n * @param {function} validation - ['validateIds']\n */\nrouter.get(\"/get-").concat(r,'/many", validateIds, getMany').concat(d,");\n\n/**\n * @route GET /api/v1/").concat(i.join("/"),"/").concat(r,"/get-").concat(r,"/:id\n * @description Get a ").concat(r," by ID\n * @param {string} id - The ID of the ").concat(r," to retrieve\n * @access Public\n * @param {function} controller - ['get").concat(d,"ById']\n * @param {function} validation - ['validateId']\n */\nrouter.get(\"/get-").concat(r,'/:id", validateId, get').concat(d,"ById);\n\n// Export the router\nmodule.exports = router;\n    "),h=path.join(u,"".concat(r,".route.ts"));fs.writeFileSync(h,m.trim());var f="\nimport { Request, Response } from 'express';\nimport { ".concat(s,"Services } from './").concat(r,".service';\nimport ServerResponse from '").concat(Array(i.length+2).fill("..").join("/"),"/helpers/responses/custom-response';\nimport catchAsync from '").concat(Array(i.length+2).fill("..").join("/"),"/utils/catch-async/catch-async';\n\n/**\n * Controller function to handle the creation of a single ").concat(d,".\n *\n * @param {Request} req - The request object containing ").concat(r," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const create").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create a new ").concat(r," and get the result\n  const result = await ").concat(s,"Services.create").concat(d,"(req.body);\n  // Send a success response with the created resource data\n  ServerResponse(res, true, 201, '").concat(d," created successfully', result);\n});\n\n/**\n * Controller function to handle the creation of multiple ").concat(r,".\n *\n * @param {Request} req - The request object containing an array of ").concat(r," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const createMany").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to create multiple ").concat(r," and get the result\n  const result = await ").concat(s,"Services.createMany").concat(d,"(req.body);\n  // Send a success response with the created resources data\n  ServerResponse(res, true, 201, 'Resources created successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for a single ").concat(d,".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(r," to update in URL parameters and the updated data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const update").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to update the ").concat(r," by ID and get the result\n  const result = await ").concat(s,"Services.update").concat(d,"(id, req.body);\n  // Send a success response with the updated resource data\n  ServerResponse(res, true, 200, '").concat(d," updated successfully', result);\n});\n\n/**\n * Controller function to handle the update operation for multiple ").concat(r,".\n *\n * @param {Request} req - The request object containing an array of ").concat(r," data in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const updateMany").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to update multiple ").concat(r," and get the result\n  const result = await ").concat(s,"Services.updateMany").concat(d,"(req.body);\n  // Send a success response with the updated resources data\n  ServerResponse(res, true, 200, 'Resources updated successfully', result);\n});\n\n/**\n * Controller function to handle the deletion of a single ").concat(d,".\n *\n * @param {Request} req - The request object containing the ID of the ").concat(r," to delete in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const delete").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to delete the ").concat(r," by ID\n  await ").concat(s,"Services.delete").concat(d,"(id);\n  // Send a success response confirming the deletion\n  ServerResponse(res, true, 200, '").concat(d," deleted successfully');\n});\n\n/**\n * Controller function to handle the deletion of multiple ").concat(r,".\n *\n * @param {Request} req - The request object containing an array of IDs of ").concat(r," to delete in the body.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const deleteMany").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to delete multiple ").concat(r," and get the result\n  await ").concat(s,"Services.deleteMany").concat(d,"(req.body);\n  // Send a success response confirming the deletions\n  ServerResponse(res, true, 200, 'Resources deleted successfully');\n});\n\n/**\n * Controller function to handle the retrieval of a single ").concat(d," by ID.\n *\n * @param {Request} req - The request object containing the ID of the ").concat(r," to retrieve in URL parameters.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const get").concat(d,"ById = catchAsync(async (req: Request, res: Response) => {\n  const { id } = req.params;\n  // Call the service method to get the ").concat(r," by ID and get the result\n  const result = await ").concat(s,"Services.get").concat(d,"ById(id);\n  // Send a success response with the retrieved resource data\n  ServerResponse(res, true, 200, '").concat(d," retrieved successfully', result);\n});\n\n/**\n * Controller function to handle the retrieval of multiple ").concat(r,".\n *\n * @param {Request} req - The request object containing query parameters for filtering.\n * @param {Response} res - The response object used to send the response.\n * @returns {void}\n */\nexport const getMany").concat(d," = catchAsync(async (req: Request, res: Response) => {\n  // Call the service method to get multiple ").concat(r," based on query parameters and get the result\n  const result = await ").concat(s,"Services.getMany").concat(d,"(req.query);\n  // Send a success response with the retrieved resources data\n  ServerResponse(res, true, 200, 'Resources retrieved successfully', result);\n});\n    "),y=path.join(u,"".concat(r,".controller.ts"));fs.writeFileSync(y,f.trim());var g="\nimport mongoose, { Document, Schema } from 'mongoose';\n\ninterface I".concat(d," extends Document {\n  // Define the schema fields with their types\n}\n\nconst ").concat(d,"Schema: Schema<I").concat(d,"> = new Schema({\n  // Define schema fields here\n});\n\nconst ").concat(d," = mongoose.model<I").concat(d,">('").concat(d,"', ").concat(d,"Schema);\n\nexport default ").concat(d,";\n    "),v=path.join(u,"".concat(r,".model.ts"));o.exists||fs.writeFileSync(v,g.trim());var b="\nexport interface T".concat(d," {\n  // Add fields as needed\n}\n    "),R=path.join(u,"".concat(r,".interface.ts"));fs.writeFileSync(R,b.trim());var q="\nimport { NextFunction, Request, Response } from 'express';\nimport { z } from 'zod';\nimport zodErrorHandler from '".concat(Array(i.length+2).fill("..").join("/"),"/handlers/zod-error-handler';\n\n/**\n * Zod schema for validating ").concat(r," data.\n */\nconst zod").concat(d,"Schema = z.object({\n  // Define schema fields here\n}).strict();\n\n/**\n * Middleware function to validate ").concat(r," using Zod schema.\n * @param {object} req - The request object.\n * @param {object} res - The response object.\n * @param {function} next - The next middleware function.\n * @returns {void}\n */\nexport const validate").concat(d," = (req: Request, res: Response, next: NextFunction) => {\n  // Validate request body\n  const { error, success } = zod").concat(d,"Schema.safeParse(req.body);\n\n  // Check if validation was successful\n  if (!success) {\n    // If validation failed, use the Zod error handler to send an error response\n    return zodErrorHandler(req, res, error);\n  }\n\n  // If validation passed, proceed to the next middleware function\n  return next();\n};\n\n"),T=path.join(u,"".concat(r,".validation.ts"));fs.writeFileSync(T,q.trim());var S="\n// Import the model\nimport ".concat(d,"Model from '").concat(o.exists?"".concat(Array(i.length+1).fill("..").join("/"),"/").concat(r,"/").concat(r,".model"):"./".concat(r,".model"),"';\n/**\n * Service function to create a new ").concat(r,".\n *\n * @param data - The data to create a new ").concat(r,".\n * @returns {Promise<").concat(d,">} - The created ").concat(r,".\n */\nconst create").concat(d," = async (data: object) => {\n  const new").concat(d," = new ").concat(d,"Model(data);\n  return await new").concat(d,".save();\n};\n\n/**\n * Service function to create multiple ").concat(r,"s.\n *\n * @param data - An array of data to create multiple ").concat(r,".\n * @returns {Promise<").concat(d,"[]>} - The created ").concat(r,".\n */\nconst createMany").concat(d," = async (data: object[]) => {\n  return await ").concat(d,"Model.insertMany(data);\n};\n\n/**\n * Service function to update a single ").concat(r," by ID.\n *\n * @param id - The ID of the ").concat(r," to update.\n * @param data - The updated data for the ").concat(r,".\n * @returns {Promise<").concat(d,">} - The updated ").concat(r,".\n */\nconst update").concat(d," = async (id: string, data: object) => {\n  return await ").concat(d,"Model.findByIdAndUpdate(id, data, { new: true });\n};\n\n/**\n * Service function to update multiple ").concat(r,".\n *\n * @param data - An array of data to update multiple ").concat(r,".\n * @returns {Promise<").concat(d,"[]>} - The updated ").concat(r,".\n */\nconst updateMany").concat(d," = async (data: { id: string, updates: object }[]) => {\n  const updatePromises = data.map(({ id, updates }) =>\n    ").concat(d,"Model.findByIdAndUpdate(id, updates, { new: true })\n  );\n  return await Promise.all(updatePromises);\n};\n\n/**\n * Service function to delete a single ").concat(r," by ID.\n *\n * @param id - The ID of the ").concat(r," to delete.\n * @returns {Promise<").concat(d,">} - The deleted ").concat(r,".\n */\nconst delete").concat(d," = async (id: string) => {\n  return await ").concat(d,"Model.findByIdAndDelete(id);\n};\n\n/**\n * Service function to delete multiple ").concat(r,".\n *\n * @param ids - An array of IDs of ").concat(r," to delete.\n * @returns {Promise<").concat(d,"[]>} - The deleted ").concat(r,".\n */\nconst deleteMany").concat(d," = async (ids: string[]) => {\n  return await ").concat(d,"Model.deleteMany({ _id: { $in: ids } });\n};\n\n/**\n * Service function to retrieve a single ").concat(r," by ID.\n *\n * @param id - The ID of the ").concat(r," to retrieve.\n * @returns {Promise<").concat(d,">} - The retrieved ").concat(r,".\n */\nconst get").concat(d,"ById = async (id: string) => {\n  return await ").concat(d,"Model.findById(id);\n};\n\n/**\n * Service function to retrieve multiple ").concat(r," based on query parameters.\n *\n * @param query - The query parameters for filtering ").concat(r,".\n * @returns {Promise<").concat(d,"[]>} - The retrieved ").concat(r,".\n */\nconst getMany").concat(d," = async (query: object) => {\n  return await ").concat(d,"Model.find(query);\n};\n\nexport const ").concat(s,"Services = {\n  create").concat(d,",\n  createMany").concat(d,",\n  update").concat(d,",\n  updateMany").concat(d,",\n  delete").concat(d,",\n  deleteMany").concat(d,",\n  get").concat(d,"ById,\n  getMany").concat(d,",\n};\n\n    "),$=path.join(u,"".concat(r,".service.ts"));fs.writeFileSync($,S.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p(y)," ").concat(BLUE,"(").concat(Buffer.byteLength(f,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p(R)," ").concat(BLUE,"(").concat(Buffer.byteLength(b,"utf8")," bytes)")),o.exists||(fs.writeFileSync(v,g.trim()),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p(v)," ").concat(BLUE,"(").concat(Buffer.byteLength(g,"utf8")," bytes)"))),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p(h)," ").concat(BLUE,"(").concat(Buffer.byteLength(m,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p($)," ").concat(BLUE,"(").concat(Buffer.byteLength(S,"utf8")," bytes)")),console.log("".concat(GREEN,"CREATE ").concat(RESET).concat(p(T)," ").concat(BLUE,"(").concat(Buffer.byteLength(q,"utf8")," bytes)"))}),program.parse(process.argv)):(console.error("Unknown command: ".concat(command)),process.exit(1));